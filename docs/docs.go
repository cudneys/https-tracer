// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/trace": {
            "get": {
                "description": "Traces HTTP/HTTPS requests",
                "produces": [
                    "application/json"
                ],
                "summary": "HTTP/HTTPS Request Tracer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "URL To Test",
                        "name": "url",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TraceResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "big.Int": {
            "type": "object"
        },
        "models.RequestStats": {
            "type": "object",
            "properties": {
                "connection_done_time": {
                    "type": "string"
                },
                "connection_start": {
                    "type": "string"
                },
                "connection_start_time": {
                    "type": "string"
                },
                "connection_time_delta": {
                    "type": "integer"
                },
                "dns_coalesced": {
                    "type": "boolean"
                },
                "dns_done": {
                    "type": "string"
                },
                "dns_error": {
                    "type": "string"
                },
                "dns_resolved_addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/net.IPAddr"
                    }
                },
                "dns_start": {
                    "type": "string"
                },
                "dns_time_delta": {
                    "type": "integer"
                },
                "remote_host": {
                    "type": "string"
                },
                "tls_connection_state": {
                    "$ref": "#/definitions/tls.ConnectionState"
                },
                "tls_handshake_done_time": {
                    "type": "string"
                },
                "tls_handshake_start_time": {
                    "type": "string"
                },
                "tls_handshake_time_delta": {
                    "type": "integer"
                }
            }
        },
        "models.TraceRequest": {
            "type": "object",
            "properties": {
                "log_tls_details": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.TraceResponse": {
            "type": "object",
            "properties": {
                "trace_request": {
                    "$ref": "#/definitions/models.TraceRequest"
                },
                "trace_response": {
                    "$ref": "#/definitions/models.RequestStats"
                }
            }
        },
        "net.IPAddr": {
            "type": "object",
            "properties": {
                "ip": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "zone": {
                    "description": "IPv6 scoped addressing zone",
                    "type": "string"
                }
            }
        },
        "net.IPNet": {
            "type": "object",
            "properties": {
                "ip": {
                    "description": "network number",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "mask": {
                    "description": "network mask",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "pkix.AttributeTypeAndValue": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "value": {
                    "type": "any"
                }
            }
        },
        "pkix.Extension": {
            "type": "object",
            "properties": {
                "critical": {
                    "type": "boolean"
                },
                "id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "value": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "pkix.Name": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extraNames": {
                    "description": "ExtraNames contains attributes to be copied, raw, into any marshaled\ndistinguished names. Values override any attributes with the same OID.\nThe ExtraNames field is not populated when parsing, see Names.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkix.AttributeTypeAndValue"
                    }
                },
                "locality": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "names": {
                    "description": "Names contains all parsed attributes. When parsing distinguished names,\nthis can be used to extract non-standard attributes that are not parsed\nby this package. When marshaling to RDNSequences, the Names field is\nignored, see ExtraNames.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkix.AttributeTypeAndValue"
                    }
                },
                "serialNumber": {
                    "type": "string"
                },
                "streetAddress": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "tls.ConnectionState": {
            "type": "object",
            "properties": {
                "cipherSuite": {
                    "description": "CipherSuite is the cipher suite negotiated for the connection (e.g.\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_AES_128_GCM_SHA256).",
                    "type": "integer"
                },
                "didResume": {
                    "description": "DidResume is true if this connection was successfully resumed from a\nprevious session with a session ticket or similar mechanism.",
                    "type": "boolean"
                },
                "handshakeComplete": {
                    "description": "HandshakeComplete is true if the handshake has concluded.",
                    "type": "boolean"
                },
                "negotiatedProtocol": {
                    "description": "NegotiatedProtocol is the application protocol negotiated with ALPN.",
                    "type": "string"
                },
                "negotiatedProtocolIsMutual": {
                    "description": "NegotiatedProtocolIsMutual used to indicate a mutual NPN negotiation.\n\nDeprecated: this value is always true.",
                    "type": "boolean"
                },
                "ocspresponse": {
                    "description": "OCSPResponse is a stapled Online Certificate Status Protocol (OCSP)\nresponse provided by the peer for the leaf certificate, if any.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "peerCertificates": {
                    "description": "PeerCertificates are the parsed certificates sent by the peer, in the\norder in which they were sent. The first element is the leaf certificate\nthat the connection is verified against.\n\nOn the client side, it can't be empty. On the server side, it can be\nempty if Config.ClientAuth is not RequireAnyClientCert or\nRequireAndVerifyClientCert.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/x509.Certificate"
                    }
                },
                "serverName": {
                    "description": "ServerName is the value of the Server Name Indication extension sent by\nthe client. It's available both on the server and on the client side.",
                    "type": "string"
                },
                "signedCertificateTimestamps": {
                    "description": "SignedCertificateTimestamps is a list of SCTs provided by the peer\nthrough the TLS handshake for the leaf certificate, if any.",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "tlsunique": {
                    "description": "TLSUnique contains the \"tls-unique\" channel binding value (see RFC 5929,\nSection 3). This value will be nil for TLS 1.3 connections and for all\nresumed connections.\n\nDeprecated: there are conditions in which this value might not be unique\nto a connection. See the Security Considerations sections of RFC 5705 and\nRFC 7627, and https://mitls.org/pages/attacks/3SHAKE#channelbindings.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "verifiedChains": {
                    "description": "VerifiedChains is a list of one or more chains where the first element is\nPeerCertificates[0] and the last element is from Config.RootCAs (on the\nclient side) or Config.ClientCAs (on the server side).\n\nOn the client side, it's set if Config.InsecureSkipVerify is false. On\nthe server side, it's set if Config.ClientAuth is VerifyClientCertIfGiven\n(and the peer provided a certificate) or RequireAndVerifyClientCert.",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/x509.Certificate"
                        }
                    }
                },
                "version": {
                    "description": "Version is the TLS version used by the connection (e.g. VersionTLS12).",
                    "type": "integer"
                }
            }
        },
        "url.URL": {
            "type": "object",
            "properties": {
                "forceQuery": {
                    "description": "append a query ('?') even if RawQuery is empty",
                    "type": "boolean"
                },
                "fragment": {
                    "description": "fragment for references, without '#'",
                    "type": "string"
                },
                "host": {
                    "description": "host or host:port",
                    "type": "string"
                },
                "opaque": {
                    "description": "encoded opaque data",
                    "type": "string"
                },
                "path": {
                    "description": "path (relative paths may omit leading slash)",
                    "type": "string"
                },
                "rawFragment": {
                    "description": "encoded fragment hint (see EscapedFragment method)",
                    "type": "string"
                },
                "rawPath": {
                    "description": "encoded path hint (see EscapedPath method)",
                    "type": "string"
                },
                "rawQuery": {
                    "description": "encoded query values, without '?'",
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "user": {
                    "description": "username and password information",
                    "$ref": "#/definitions/url.Userinfo"
                }
            }
        },
        "url.Userinfo": {
            "type": "object"
        },
        "x509.Certificate": {
            "type": "object",
            "properties": {
                "authorityKeyId": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "basicConstraintsValid": {
                    "description": "BasicConstraintsValid indicates whether IsCA, MaxPathLen,\nand MaxPathLenZero are valid.",
                    "type": "boolean"
                },
                "crldistributionPoints": {
                    "description": "CRL Distribution Points",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dnsnames": {
                    "description": "Subject Alternate Name values. (Note that these values may not be valid\nif invalid values were contained within a parsed certificate. For\nexample, an element of DNSNames may not be a valid DNS domain name.)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "emailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "excludedDNSDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "excludedEmailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "excludedIPRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/net.IPNet"
                    }
                },
                "excludedURIDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extKeyUsage": {
                    "description": "Sequence of extended key usages.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "extensions": {
                    "description": "Extensions contains raw X.509 extensions. When parsing certificates,\nthis can be used to extract non-critical extensions that are not\nparsed by this package. When marshaling certificates, the Extensions\nfield is ignored, see ExtraExtensions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkix.Extension"
                    }
                },
                "extraExtensions": {
                    "description": "ExtraExtensions contains extensions to be copied, raw, into any\nmarshaled certificates. Values override any extensions that would\notherwise be produced based on the other fields. The ExtraExtensions\nfield is not populated when parsing certificates, see Extensions.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pkix.Extension"
                    }
                },
                "ipaddresses": {
                    "type": "array",
                    "items": {
                        "description": "network number",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "isCA": {
                    "type": "boolean"
                },
                "issuer": {
                    "$ref": "#/definitions/pkix.Name"
                },
                "issuingCertificateURL": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "keyUsage": {
                    "type": "integer"
                },
                "maxPathLen": {
                    "description": "MaxPathLen and MaxPathLenZero indicate the presence and\nvalue of the BasicConstraints' \"pathLenConstraint\".\n\nWhen parsing a certificate, a positive non-zero MaxPathLen\nmeans that the field was specified, -1 means it was unset,\nand MaxPathLenZero being true mean that the field was\nexplicitly set to zero. The case of MaxPathLen==0 with MaxPathLenZero==false\nshould be treated equivalent to -1 (unset).\n\nWhen generating a certificate, an unset pathLenConstraint\ncan be requested with either MaxPathLen == -1 or using the\nzero value for both MaxPathLen and MaxPathLenZero.",
                    "type": "integer"
                },
                "maxPathLenZero": {
                    "description": "MaxPathLenZero indicates that BasicConstraintsValid==true\nand MaxPathLen==0 should be interpreted as an actual\nmaximum path length of zero. Otherwise, that combination is\ninterpreted as MaxPathLen not being set.",
                    "type": "boolean"
                },
                "notBefore": {
                    "description": "Validity bounds.",
                    "type": "string"
                },
                "ocspserver": {
                    "description": "RFC 5280, 4.2.2.1 (Authority Information Access)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "permittedDNSDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "permittedDNSDomainsCritical": {
                    "description": "Name constraints",
                    "type": "boolean"
                },
                "permittedEmailAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "permittedIPRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/net.IPNet"
                    }
                },
                "permittedURIDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "policyIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "publicKey": {
                    "type": "any"
                },
                "publicKeyAlgorithm": {
                    "type": "integer"
                },
                "raw": {
                    "description": "Complete ASN.1 DER content (certificate, signature algorithm and signature).",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "rawIssuer": {
                    "description": "DER encoded Issuer",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "rawSubject": {
                    "description": "DER encoded Subject",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "rawSubjectPublicKeyInfo": {
                    "description": "DER encoded SubjectPublicKeyInfo.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "rawTBSCertificate": {
                    "description": "Certificate part of raw ASN.1 DER content.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "serialNumber": {
                    "$ref": "#/definitions/big.Int"
                },
                "signature": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "signatureAlgorithm": {
                    "type": "integer"
                },
                "subject": {
                    "$ref": "#/definitions/pkix.Name"
                },
                "subjectKeyId": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "unhandledCriticalExtensions": {
                    "description": "UnhandledCriticalExtensions contains a list of extension IDs that\nwere not (fully) processed when parsing. Verify will fail if this\nslice is non-empty, unless verification is delegated to an OS\nlibrary which understands all the critical extensions.\n\nUsers can access these extensions using Extensions and can remove\nelements from this slice if they believe that they have been\nhandled.",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "unknownExtKeyUsage": {
                    "description": "Encountered extended key usages unknown to this package.",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/url.URL"
                    }
                },
                "version": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
